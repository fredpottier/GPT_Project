name: GPT_Project
version: "1.2"
schema: v1
# === Modèles ===
models:
  # Chat / Edit / Apply (OpenAI)
  - name: GPT-4o
    provider: openai
    model: gpt-4o
    apiKey: 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
    apiBase: https://api.openai.com/v1
    roles: [chat, edit, apply, summarize]

  # Autocomplete (Mistral Codestral)
  - name: Codestral
    provider: mistral
    model: codestral-latest
    apiKey: jYr7zHIqKEmlSJ48unqf6IljWuIMcZNC
    apiBase: https://api.mistral.ai/v1
    roles: [autocomplete]
    # options d'autocomplete (facultatif)
    autocompleteOptions:
      debounceDelay: 250
      maxPromptTokens: 1024
      onlyMyCode: true

# === Contexte (providers supportés en 1.2.x) ===
context:
  - provider: file # fichiers ouverts
  - provider: codebase # index du repo (respecte .gitignore)
    params:
      nFinal: 10
  - provider: terminal # lit le terminal intégré VS Code
  - provider: diff # changements non commit (git diff)

# === Règles (collées en "system") ===
rules:
  - name: Diffs minimaux
    rule: >
      Lorsque tu proposes des modifications, produis un patch au format unified diff
      minimal et sûr, qui modifie le moins de lignes possible et ne réécrit pas l’architecture.
      Explique ensuite brièvement comment tester.

  - name: Style logs
    rule: >
      Préfère logging.getLogger(__name__), niveaux INFO/WARN/ERROR, messages actionnables.
      Pas de prints en prod; garde les exceptions chaînées (raise ... from e).

# === Prompts (ex-quick actions) ===
prompts:
  - name: fix_stacktrace
    description: Analyse le stacktrace en cours et propose un patch diff minimal
    prompt: |
      Contexte: tu as accès au terminal, aux fichiers ouverts et à l'index du repo.
      1) Résume la cause racine de l’erreur en 1-2 phrases.
      2) Détaille les fichiers/sections à modifier.
      3) Fournis un patch *unified diff minimal et sûr* (sans refactor global).
      4) Termine par 3–5 points expliquant précisément le changement et comment tester.
      Si l'erreur implique Docker, Zep ou Postgres, vérifie aussi docker-compose.yml et .env.

  - name: diagnose_import_error
    description: Trouver la cause d’un ImportError/ModuleNotFound et corriger
    prompt: |
      En partant du message d’erreur dans le terminal:
      - Scanne l’index du repo pour retrouver les modules, __init__.py, chemins relatifs.
      - Liste 1–3 causes probables (nom de module, env, version, chemin).
      - Propose un plan court, puis un *unified diff minimal* pour corriger.
      - Ne change pas l’API publique ni l’architecture.

  - name: fix_zep_postgres_connection
    description: Corriger "connection refused" entre Zep et Postgres (compose/env)
    prompt: |
      Inspecte docker-compose.yml, les variables ZEP_DB_DSN, ZEP_STORE_TYPE, POSTGRES_*,
      healthcheck, depends_on, et noms de service. Fournis:
      1) Analyse courte cause racine (ordre de démarrage, DSN, réseau).
      2) Un *unified diff minimal* (compose + .env si besoin) garantissant:
         - ordre de démarrage correct (depends_on + healthcheck),
         - DSN valide (hôte=nom du service db, port 5432),
         - healthcheck Postgres fiable.
      3) Étapes de test (docker compose down -v ; up ; vérif des logs).

  - name: refactor_selection_logs
    description: Refactor ciblé avec logs structurés (sans changer le contrat public)
    prompt: |
      Sur le code sélectionné, améliore lisibilité, annotations de type, et logging
      structuré via logging.getLogger(__name__). Ajoute gestion d’erreurs propre
      (try/except avec raise ... from e si utile). Fournis un *unified diff minimal*
      sans modifier le comportement fonctionnel.

  - name: explain_file
    description: Expliquer le fichier ouvert (rôle, dépendances, points d’attention)
    prompt: |
      Donne un aperçu clair du fichier ouvert: responsabilités, dépendances internes/externes,
      pièges possibles, et 3 suggestions d’amélioration concrètes, concises et actionnables.
